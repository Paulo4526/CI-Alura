# Aqui definimos o nome do nosso pipeline/workflow
name: Continuous Integration

# Aqui definimos quando meu pipeline será executado pela automatização
on:
  # Informamos que o pipeline será somente executado quando tivermos um push pra branch main
  push:
    branches: [ "main" ]
  # Informamos que também o pipeline será executado quando tivermos um pull para a main
  pull_request:
    branches: [ "main" ]

# Após a definição das condições de quando o pipeline será executado, aqui iniciamos o nosso job que é o que será feito
# após as requisições sejam atendidas.
jobs:
  # Dano nome para o nosso primeiro job que se chama ci
    ci:
      # Aqui informamos que o nosso job será executado em uma maquina com o ubuntu instalado sendo sua ultima versão
      runs-on: ubuntu-latest
      # Agora informaremos o passo a passo da execução dentro da máquina virtual
      steps:
      # Informando que o wokflow será executado a partir de um diretório/repositório já esxistente na máquina virtual, ou seja é como
      # se a maquina virtual fizesse um git clone do nosso projeto dentro desse repositório, e instalasse todos os programas necessários
      # para a nossa aplicação
      - uses: actions/checkout@v4

      # Aqui criamos nosso primeiro passo ou step esse step tem o nome de Set up Go
      - name: Set up Go
      # Aqui setamos que dentro do nosso diretório/repositório actions/ seja criado outro diretório setup-go@v4 onde será armazenado nosso go
        uses: actions/setup-go@v4
      # aqui informamos qual a versão do go será instalada dentro do nosso diretório/repositório
        with:
          go-version: '1.22'

      # Após o primeiro passo teremos o segundo passo que será iniciar nosso banco postgres
      - name: Inicia Banco
      # Aqui como no comando do docker, para iniciarmos somente a nossa imagem postgres(que é o mesmo nome do repositório da imagem)
      # estamos utilizando o mesmo comando só que na máquina virtual, que sumulará outro ambiente
        run: docker compose up -d postgres
      
      # Nesse terceiro step, iniciaremos nosso lint para teste
      - name: Lint
      # Vemos aqui também que estamos utilizando um comando docker para testar nossa aplicação e iniciar nosso lint na máquina virtual
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.60
          args: controllers/ database/ models/ routes/

      # E por ultimo após a instalação do nosso lint na máquina virtual, criamos o comando teste para testar alguma aplicação nossa.
      - name: Teste Go
      # Comando go para teste da nossa aplicação usando os parametros secrets que fica na pasta do repositório git, settings, Secrets and Variables e actions
      # Após isso só adicionar Repositorys Secrets
        run: DB_HOST=${{ secrets.DB_HOST }} DB_PASSWORD=${{ secrets.DB_PASSWORD }} DB_USER=${{ secrets.DB_USER }} DB_NAME=${{ secrets.DB_NAME }} DB_PORT=${{ secrets.DB_PORT }} go test -v main_test.go